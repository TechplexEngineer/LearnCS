Course
  id                    : key,
  name                  : string
  owners                : array of User.id
  authors               : array of User.id
  intro_video           : string
  intro_image           : string // shown if intro_video is null
  intro_text            : string

Lesson
  id                    : key,
  name                  : string,
  video                 : string
  nextType              : enum { Lesson, Assessment }
  nextItem              : Lesson.id or Assessment.id

Assessment
  id                    : key,
  name                  : string,
  scale                 : number
  starter_code          : string,
  eval_script           : longstring
  
User
  id                    : key
  email                 : string
  displayName           : string

Registration
  id                    : key,
  user                  : User.id
  course                : Course.id

  // "highest" indicates how far they've ever gotten, allowing retaking
  // lessons but still tracking their highest  one. UserCourseStatus can be
  // used to find repeated lessons and assessments.
  highest_type          : enum { Lesson, Assessment }
  highest_item          : Lesson.id or Assessment.id
  enroll_timestamp      : date,
  complete_timestamp    : date

UserCourseStatus
  id                    : key
  registration          : Registration.id
  timestamp             : date
  type                  : enum { Lesson, Assessment }
  item                  : Lesson.id or Assessment.id
  completed             : boolean
  assessment_score      : number // if type==Assessment and completed==true

// for future evaluation of how user codes
UsageDetail
  id                    : key

  // ultimately, we'd like this...
  registration          : Registration.id
  assessment            : Assessment.id

  // ... but for now, we'll live with this:
  user                  : User.id
  
  // Automatically-generated timestamp for this record
  timestamp             : date

  // User's code (in editor) at this time
  snapshot              : longstring

  // A breakpoint is set at the specified line number
  set_breakpoint_at     : number

  // A breakpoint is hit, during execution, at specified line number
  breakpoint_stop_at    : number

  // The Memory View button is toggled; boolean indictes whether it's now shown
  show_memory_view      : boolean

  // A button is pressed (Run/Step/Continue)
  button_press          : string // gui id of button which was pressed

  // The program terminates via an exit() call or return from main
  exit_code             : number

  // The program crashed. Value is the resulting error string.
  exit_crash            : string


#if 0 // for later...
  // Movement within the editor. Value is resulting line and column number
  set_position          : [ line : number, col : number ]

  // Sequence of (generally printable) characters
  keysequence           : string
#endif

  // If parse tree is properly built, a depiction thereof
  parse_tree            : json

  // if a compile or run-time error occurs, the native (and possibly)
  // displayed error messages
  error                 : string
  displayError          : string



Notes
-----

- need not be an entire course
- work with students in Computing 1
  - paid to work with me on the side
  - mini-class
- Computing 1 labs
  - 8-9 sections
  - assessments
  - everyone in course instroduced to LearnCS! at the beginning
  - surveys with students
    - did it help them think about the material?
  - flag in code to collect or not collect data
  - is there any correlation between use of LearnCS! and their performance
  - integrate with CS authentication system
  - track
    - do they use the notional machine depiction (default to not displayed)
    - breakpoint usage, as indication of looking at memory
    - correlate usage of LearnCS! with submissions to auto-grader
      - need to use known authentication to match
    - hyphothesis?
    - assessment
      - work with LearnCS! correlated to submission time
      - students who use tool do better on tests
      - take less time on assignments
      - assignment scores are higher
      - number of submissions?

- develop labs that can be used with or without LearnCS! except for first few
  labs which will all use LearnCS!
