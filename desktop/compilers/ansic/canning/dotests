#!/usr/bin/nodejs

var sys = require('sys');
var exec = require('child_process').exec;

function puts(error, stdout, stderr)
{
  sys.puts(stdout);
};

[
  {
    name  : "p001-helloworld.c"
  },
  {
    name  : "p002-value6.c"
  },
  {
    name  : "p003-charP.c"
  },
  {
    name  : "p004-scanf.c"
  },
  {
    name  : "p005-sum-of-two-values.c",
    stdin : "23 42"
  },
  {
    name  : "p006-fscanf.c"
  },
  {
    name  : "p007-bigger-than-100.c",
    stdin : [ "99", "100", "101" ]
  },
  {
    name  : "p008-horizontal-line.c"
  },
  {
    name  : "p009-using-for-loop.c"
  },
  {
    name  : "p010-sum-of-twenty.c"
  },
  {
    name  : "p011-equal-to-zero.c",
    stdin : [ "-1", "0", "1" ]
  },
  {
    name  : "p012-pos-neg-zero.c",
    stdin : [ "-1", "0", "1" ]
  },
  {
    name  : "p013-abs-function.c",
    stdin : [ "3", "-4" ]
  },
  {
    name  : "p015-sqrt-function.c",
    stdin : "2"
  },
  {
    name  : "p016-sine-atof.c",
    stdin : [ "3.1415926", "1.570796" ]
  },
  {
    name  : "p017-count-characters.c",
    stdin : "hello world."
  },
  {
    name  : "p018-solidbox.c",
    stdin : "8 5"
  },
  {
    name  : "p019-area-of-rectangle.c",
    stdin : "5 8"
  },
  {
    name  : "p020-area-of-circle.c",
    stdin : [ "1", "2" ]
  },
  {
    name  : "p021-argv.c",
    args  : "hello world"
  },
  {
    name  : "p022-reverse-command-line.c",
    args  : "hello world"
  },
  {
    name  : "p023-scanf-returns-what.c"
  },
  {
    name  : "p024-one-dim-array.c"
  },
  {
    name  : "p025-sum-of-bunch.c"
  },
  {
    name  : "p026-fgetc-and-toupper.c"
  },
  {
    name  : "p027-reverse.c",
    stdin : " 2 3 4 5 6 7 8 9 10 11 12 13 "
  },
  {
    name  : "p028-digit-sum.c"
  },
  {
    name  : "p029-average.c"
  },
  {
    name  : "p030-unfilledbox.c",
    stdin : "8 5"
  },
  {
    name  : "p038-blank-removal.c",
    args  : "/canning/p038-input"
  },
  {
    name  : "p054-fibonacci-iterative.c",
    stdin : [ "5", "8", "12" ]
  },
  {
    name  : "p055-fibonacci-recursive.c",
    stdin : [ "5", "8", "12" ]  
  }
].forEach(
  function(test)
  {
    var             cmd;
    
    // Convert stdin to an array in all cases
    if (! test.stdin)
    {
      test.stdin = [ "" ];
    }
    else if (typeof test.stdin == "string")
    {
      test.stdin = [ test.stdin ];
    }
    
    // For each set of input...
    test.stdin.forEach(
      function(stdin)
      {
        // Create the generic portion of the command
        cmd =
          [
            "nodejs ansic.js",
            test.name,
            "--rootdir=/home/derrell/ME"
          ];
        
        // If there is standard input...
        if (stdin.length > 0)
        {
          // ... then echo it and pipe to standard input
          cmd.unshift("echo '" + stdin + "' | ");
        }
      });

exec("ls -la > /tmp/xxx", puts);

  });
